{
  "ver": "1.0.25",
  "uuid": "291c678e-7016-45fe-b31f-74eb392ec952",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float radius;\nuniform float progress;\nvoid main () {\n  vec4 o = vec4(1.0, 1.0, 1.0, 1.0);\n  float primeter = 2.0 * 3.1415926 * radius;\n  float x = v_uv0.x;\n  float outLen = 1.0 - progress;\n  float range = 3.0 / 4.0;\n  vec2 c_uv0 = v_uv0;\n  float realX = c_uv0.x;\n  float endX = 1.0;\n  float startX = progress;\n  outLen = min(primeter * range, outLen);\n  if(outLen < primeter * 0.25) {\n    endX = progress + sin(outLen / radius) * radius;\n  }else if(outLen > primeter * 0.25) {\n    endX = progress + radius;\n  }else if(outLen > primeter * 0.5) {\n    endX = progress + radius;\n    startX = progress - sin(outLen - primeter * 0.5) * radius;\n  }\n  if(x > startX && x < endX) {\n      float offset = asin((x - progress)/radius) * radius;\n      if(offset > 0.0) {\n        if(outLen > primeter * 0.25) {\n          realX = offset + primeter * 0.25 + progress;\n        }else {\n          realX = offset + progress;\n        }\n      }else {\n        if(outLen > primeter * 0.75) {\n          realX = offset + primeter * 0.75 + progress;\n        }else {\n          realX = offset + primeter * 0.5 + progress;\n        }\n      }\n      c_uv0.x = realX;\n  vec4 texture_tmp = texture2D(texture, c_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, c_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  }else if(x > endX) {\n    o.a = 0.0;\n    o.rgb *= o.a;\n  }else {\n  vec4 texture_tmp = texture2D(texture, c_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, c_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  }\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Custom {\n  float radius;\n  float progress;\n};\nvoid main () {\n  vec4 o = vec4(1.0, 1.0, 1.0, 1.0);\n  float primeter = 2.0 * 3.1415926 * radius;\n  float x = v_uv0.x;\n  float outLen = 1.0 - progress;\n  float range = 3.0 / 4.0;\n  vec2 c_uv0 = v_uv0;\n  float realX = c_uv0.x;\n  float endX = 1.0;\n  float startX = progress;\n  outLen = min(primeter * range, outLen);\n  if(outLen < primeter * 0.25) {\n    endX = progress + sin(outLen / radius) * radius;\n  }else if(outLen > primeter * 0.25) {\n    endX = progress + radius;\n  }else if(outLen > primeter * 0.5) {\n    endX = progress + radius;\n    startX = progress - sin(outLen - primeter * 0.5) * radius;\n  }\n  if(x > startX && x < endX) {\n      float offset = asin((x - progress)/radius) * radius;\n      if(offset > 0.0) {\n        if(outLen > primeter * 0.25) {\n          realX = offset + primeter * 0.25 + progress;\n        }else {\n          realX = offset + progress;\n        }\n      }else {\n        if(outLen > primeter * 0.75) {\n          realX = offset + primeter * 0.75 + progress;\n        }else {\n          realX = offset + primeter * 0.5 + progress;\n        }\n      }\n      c_uv0.x = realX;\n  vec4 texture_tmp = texture(texture, c_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, c_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  }else if(x > endX) {\n    o.a = 0.0;\n    o.rgb *= o.a;\n  }else {\n  vec4 texture_tmp = texture(texture, c_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, c_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  }\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}